<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            9. Technicalities: Classes, etc.
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    9. Technicalities: Classes, etc.
                </h1>
                <details>
                    <summary class="sum1">
                    9.1 User-defined types
                    </summary>
                    
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    The C++ language provides you with some built-in types,
                    such as <code>char</code>, <code>int</code>,
                    and <code>double</code>. A type is called
                    built-in if the compiler knows how to represent objects of
                    the type and which operations can be done on it (such as +
                    and *) without being told by declarations supplied by a
                    programmer in source code.
                    </p>
                    <p>
                    
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    9.2 Classes and members
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    A class is a user-defined type. It is composed of built-in
                    types, other user-defined types, and functions. The parts
                    used to define the class are called members. A class has
                    zero or more members. For example: 
                    </p>
                    
                    <p>
                    <code>
                        <pre>
class X {
    public:
        int m; // data member 
        int mf(int v) { int old = m; m=v; return old; } // function member 
};
                        </pre>
                    </code>
                    </p>

                    <p>
                    Members can be of various types. Most are either data
                    members, which define the representation of an object of
                    the class, or function members, which provide operations on
                    such objects. We access members using the
                    <code>object.member</code>
                    notation. For example:
                    </p>

                    <p>
                    <code>
                        <pre>
X var;             // var is a variable of type X
var.m = 7;         // assign to var’s data member m
int x = var.mf(9); //call var’s member function mf()
                        </pre>
                    </code>
                    </p>


                    <p>
                        You can read var.m as var’s m. Most people pronounce it
                        “var dot m” or “var’s m.” The type of a member
                        determines what operations we can do on it. We can read
                        and write an int member, call a function member, etc.
                        A member function, such as X’s mf(), does not need to
                        use the var.m notation.  It can use the plain member
                        name (m in this example). Within a member function, a
                        member name refers to the member of that name in the
                        object for which the member function was called. Thus,
                        in the call var.mf(9), the m in the definition of mf()
                        refers to var.m.  
                    </p>
                </details>

                <details>
                    <summary class="sum1">
                    9.3 Interface and implementation
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        Usually, we think of a class as having an interface
                        plus an implementation. The interface is the part of
                        the class’s declaration that its users access directly.
                        The implementation is that part of the class’s
                        declaration that its users access only indirectly
                        through the interface. The public interface is
                        identified by the label public: and the implementation
                        by the label private:. You can think of a class
                        declaration like this:
                    </p>

                    <p>
                    <code>
                        <pre>
class X {
    // this class’s name is X
    public:
        // public members:
        //
        – the interface to users (accessible by all)
        // functions
        // types
        // data (often best kept private)
    private:
        // private members:
        //
        – the implementation details (used by members of this class only)
        // functions
        // types
        // data
};
                        </pre>
                    </code>
                    </p>


                    <p>
                        Class members are private by default.
                        <br />
                        We use private and public to represent the important
                        distinction between an interface (the user’s view of
                        the class) and implementation details (the
                        implementer’s view of the class). We explain that and
                        give lots of examples as we go along. Here we’ll just
                        mention that for something that’s just data, this
                        distinction doesn’t make sense. So, there is a useful
                        simplified notation for a class that has no private
                        implementation details.  
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    9.4 Evolving a class
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        Let’s illustrate the language facilities supporting
                        classes and the basic techniques for using them by
                        showing how — and why — we might evolve a simple data
                        structure into a class with private implementation
                        details and supporting operations. We use the
                        apparently trivial problem of how to represent a date
                        (such as August 14, 1954) in a program. The need for
                        dates in many programs is obvious (commercial
                        transactions, weather data, calendar programs, work
                        records, inventory management, etc.).  The only
                        question is how we might represent them.
                    </p>
                    <details>
                        <summary class="sum2">
                        9.4.1 struct and functions
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            How would we represent a date? When asked, most
                            people answer, “Well, how about the year, the
                            month, and the day of the month?” That’s not the
                            only answer and not always the best answer, but
                            it’s good enough for our uses, so that’s what we’ll
                            do. Our first attempt is a simple struct:
                        </p>

                        <p>
                        <code>
                            <pre>
// simple Date (too simple?)
struct Date {
    int y; // year
    int m; // month in year
    int d; // day of month
};
Date today; // a Date variable (a named object)
                            </pre>
                        </code>
                        </p>

                    </details>
                    <details>
                        <summary class="sum2">
                        9.4.2 Member functions and constructors
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        We provided an initialization function for <code>Date</code>s, one
                        that provided an important check on the validity of <code>Date</code>s. However,
                        checking functions are of little use if we fail to use them. For example,
                        assume that we have defined the output operator <code><pre>&lt;&lt;</pre></code> for a Date
                        </p>
                        <p>
                        <code>
                        <pre>
void f()
{
    Date today;
    // . . .
    cout &lt;&lt; today &lt;&lt; '\n';              //use today
    // . . .
    init_day(today,2008,3,30);
    // . . .
    Date tomorrow;
    tomorrow.y = today.y;
    tomorrow.m = today.m;              //add 1 to today
    tomorrow.d = today.d+1;            //use tomorrow
    cout &lt;&lt; tomorrow &lt;&lt; '\n';
}
                        </pre>
                        </code>
                        </p>
                        <p>
                        Here, we “forgot” to immediately initialize today and “someone” used it before
                        we got around to calling init_day().
                        “Someone else” decided that it was a waste of time to call add_day() — or maybe
                        hadn’t heard of it — and constructedtomorrow by hand. As it happens, this is
                        bad code — very bad code. Sometimes, probably most of the time, it works, but
                        small changes lead to serious errors.
                        </p>
                        <p>
                        This kind of thinking leads to a demand for an
                        initialization function that can’t be forgotten and for operations that are less
                        likely to be overlooked. The basic tool for that is member functions, that is,
                        functions declared as members of the class within
                        the class body. For example:
                   </p>
                    <code>
                    <pre>
// simple Date
// guarantee initialization with constructor
// provide some notational convenience
struct Date {
    int y, m, d;                // year, month, day
    Date(int y, int m, int d);  // check for valid date and initialize
    void add_day(int n);        // increase the Date by n days
};
                    </pre>
                    </code>
                    <p>
                    A member function with the same name as its class is
                    special. It is called a constructor and will be used for initialization
                    (“construction”) of objects of the class. It is an error — caught by the
                    compiler — to forget to initialize an object of a class that
                    has a constructor that requires an argument, and there is a special convenient
                    syntax for doing such initialization:
                    </p>
                    <code>
                    <pre>
Date my_birthday;                   //error: my_birthday not initialized
Date today {12,24,2007};            //oops! run-time error
Date last {2000,12,31};             //OK (colloquial style)
Date next = {2014,2,14};            //also OK (slightly verbose)
Date christmas = Date{1976,12,24};  //also OK (verbose style)
                    </pre>
                    </code>
                    </details>
                    <details>
                        <summary class="sum2">
                        9.4.3 Keep details private
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        We still have a problem: What if someone forgets to use
                        the member function add_day()? What if someone decides to change
                        the month directly? After all, we “forgot” to provide a facility for that:
                        </p>
                        <code>
                        <pre>
Date birthday {1960,12,31}; //December 31, 1960
++birthday.d;               //ouch! Invalid date
                            //(birthday.d==32 makes today invalid)
Date today {1970,2,3};      //ouch! Invalid date
today.m = 14;               //(today.m==14 makes today invalid)
                        </pre>
                        </code>
                        <p>
                        As long as we leave the representation of Date
                        accessible to everybody, somebody will — by accident or design — mess it
                        up; that is, someone will do something that produces an invalid value. In this
                        case, we created a Date with a value that doesn’t
                        correspond to a day on the calendar. Such invalid objects are time bombs; it is
                        just a matter of time before someone innocently
                        uses the invalid value and gets a run-time error or — usually worse — produces
                        a bad result.<br/>
                        Such concerns lead us to conclude that the representation of Date should be
                        inaccessible to users except through the public
                        member functions that we supply
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        9.4.4 Defining member functions
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        9.4.5 Referring to the current object
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
Consider a simple use of the Date class so far:<br/>
Click here to view code image<br/>
class Date {<br/>
// . . .<br/>
int month() { return m; }<br/>
// . . .<br/>
private:<br/>
int y, m, d;<br/>
// year, month, day<br/>
};void f(Date d1, Date d2)<br/>
{<br/>
cout &lt&lt d1.month() &lt&lt ' ' &lt&lt d2.month() &lt&lt '\n';<br/>
}<br/>
How does Date::month() know to return the value of d1.m in the first call
and
d2.m in the second? Look again at
Date::month(); its declaration specifies no function argument! How does
Date::month() know for which object it was
called? A class member function, such as Date::month(), has an implicit
argument which it uses to identify the object for
which it is called. So in the first call, m correctly refers to d1.m and in
the
second call it refers to d2.m. See §17.10 for more
uses of this implicit argument.
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        9.4.6 Reporting errors
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    9.5 Enumerations
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        9.5.1 "Plain" enumerations
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    9.6 Operator overloading
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    9.7 Class interfaces
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        9.7.1 Argument types
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        9.7.2 Copying
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        9.7.3 Default constructors
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        9.7.4 const member functions
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        9.7.5 Members and "helper functions"
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    9.8 The Date class
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!-- Include the test material here! -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ol>
                    </ol>
                </details>
            </div>
        </div>

    </body>
</html>
